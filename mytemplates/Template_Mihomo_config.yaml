#锚点
pr: &pr {type: select, proxies: [🚀 节点选择, ♻️ 自动选择, ♻️ 香港自动, ♻️ 台湾自动, ♻️ 日本自动, ♻️ 新加坡自动, ♻️ 美国自动, ♻️ JMS自动, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🏠 JMS节点, 💡 其他节点, 🎯 直连]}

proxy-providers:
  #在 url 里填写自己的订阅，名称不要重复
  provider1:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🎯 直连
    url: #填入订阅地址
  provider2:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🎯 直连
    url: #填入订阅地址
    #override:
      #skip-cert-verify: true
      #udp: true
      #down: "50 Mbps"
      #up: "10 Mbps"

# 用于下载订阅时制定UA
global-ua: clash.meta

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
# interface-name: eth0 （路由器下根据指定出站接口）
authentication:
  - airyl:Pan54820531

geodata-mode: false
# GEO 文件加载模式 （standard：标准加载器/memconservative：专为内存受限（小内存）设备优化的加载器（默认值））
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 48
geox-url:
  geosite: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.metadb"
  geoip: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
ecternal-ui: ui
external-ui-url: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"
# 控制面板下载地址可更换为：https://mirror.ghproxy.com/https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true

# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"

 代理模式（裸核模式需要）
tun:
  enable: true
  stack: mixed
  mtu: 9000
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist 
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "+.lan"
    - "+.local"
    - geosite:private
    - geosite:cn
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver-policy:
    "rule-set:private_domain,cn_domain":
    - 223.5.5.5
    - 119.29.29.29
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"

proxies:
- name: "🎯 直连"
  type: direct
  udp: true

proxy-groups:
  # 下面是节点选择
  - {name: 🚀 节点选择, type: select, proxies: [♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🏠 JMS节点, 💡 其他节点, 🎯 直连]}
  # 下面是自动策略组
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)香港|hk|hongkong|hong kong|台湾|tw|taiwan|日本|jp|japan|新加坡|sg|singapore|美国|us|unitedstates|united states"}
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)香港|hk|hongkong|hong kong"}
  - {name: ♻️ 台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)台湾|tw|taiwan"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)日本|jp|japan"}
  - {name: ♻️ 新加坡自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)新加坡|sg|singapore"}
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)美国|us|unitedstates|united states"}
  # 下面是区域策略组
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)香港|hk|hongkong|hong kong"}
  - {name: 🇨🇳 台湾节点, type: select, include-all: true, filter: "(?i)台湾|tw|taiwan"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日本|jp|japan"}
  - {name: 🇸🇬 新加坡节点, type: select, include-all: true, filter: "(?i)新加坡|sg|singapore"}
  - {name: 🇺🇸 美国节点, type: select, include-all: true, filter: "(?i)美国|us|unitedstates|united states"}
  - {name: 💡 其他节点, type: select, include-all: true, filter: "(?i)^(?!.*(?:香港|hk|hongkong|台湾|tw|taiwan|日本|jp|japan|新加坡|sg|singapore|美国|us|unitedstates|JMS-832907|🎯 直连)).*"}
  # 下面是故转策略组
  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?i)香港|hk|hongkong|hong kong"}
  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?i)日本|jp|japan"}
  # 下面是各网站策略组
  - {name: 🍀 Google, <<: *pr}
  - {name: 🍎 Apple, <<: *pr}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🐦‍⬛ Twitter,<<: *pr}
  - {name: 🤖 ehentai, <<: *pr}
  - {name: 😸 GitHub, <<: *pr}
  - {name: ☁️ OneDrive, <<: *pr}
  - {name: ▶️ YouTube, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 🛜 Spotify, <<: *pr}
  - {name: 🎮 Steam, <<: *pr}
  - {name: 💰 PayPal, <<: *pr}
  - {name: 📺 Bahamut, <<: *pr}
  - {name: 🏎️ Speedtest, <<: *pr}
  #- {name: 🔗 链式代理, type: relay, proxies: [🏠 JMS节点, 自建节点]}
  - {name: 🌏 全球直连, type: select, proxies: [🎯 直连, 🚀 节点选择]}
  - {name: 🎣 漏网之鱼, type: select, proxies: [🎯 直连, 🚀 节点选择]}
  
rules:
  - RULE-SET,private_domain,🎯 直连
  - RULE-SET,direct1,🎯 直连
  - RULE-SET,apple@cn_domain,🎯 直连
  - RULE-SET,steam@cn_domain,🎯 直连
  - RULE-SET,apple_domain,🍎 Apple
  #- RULE-SET,free,🔗 链式代理
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,ai,🤖 ehentai
  - RULE-SET,github_domain,😸 GitHub
  - RULE-SET,youtube_domain,▶️ YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,☁️ OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,🏎️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💰 PayPal
  - RULE-SET,spotify_domain,🛜 Spotify
  - RULE-SET,steam_domain,🎮 Steam
  - RULE-SET,twitter_domain,🐦‍⬛ Twitter
  - RULE-SET,bahamut_domain,📺 Bahamut
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,cn_domain,🌏 全球直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,twitter_ip,🐦‍⬛ Twitter,no-resolve
  - RULE-SET,cn_ip,🌏 全球直连
  - MATCH,🚀 节点选择
  
rule-anchor:
  #锚点
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  qcy: &qcy {type: http, interval: 86400, behavior: domain, format: text}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  #自己仓库内的规则列表
  direct1: { <<: *class, url: "https://raw.githubusercontent.com/airylpan/Net_rule/refs/heads/main/Ruleset/Direct.list" }
  proxylite: { <<: *qcy, url: "https://raw.githubusercontent.com/airylpan/Net_rule/refs/heads/main/Ruleset/ProxyLite.list" }
  ai: { <<: *qcy, url: "https://raw.githubusercontent.com/airylpan/Net_rule/refs/heads/main/Ruleset/AI.list" }
  free: { <<: *qcy, url: "https://raw.githubusercontent.com/airylpan/Net_rule/refs/heads/main/Ruleset/Free.list" }
  #第三方仓库内的规则列表
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/private.mrs" }
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/google.mrs" }
  apple@cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/apple-cn.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/apple.mrs" }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/microsoft.mrs" }
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/telegram.mrs" }
  twitter_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/twitter.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/github.mrs" }
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/onedrive.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/youtube.mrs" }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/netflix.mrs" }
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/tiktok.mrs" }
  spotify_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/spotify.mrs"}
  steam_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/steam.mrs"}
  steam@cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/steam%40cn.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/paypal.mrs" }
  bahamut_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/bahamut.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/ookla-speedtest.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/cn.mrs" }
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/gfw.mrs" }

  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/netflix.mrs" }
  twitter_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/twitter.mrs"}